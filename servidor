#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None


def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    dados = conexao.dados_residuais + dados
    conexao.dados_residuais = b''

    if dados == b'':
        return sair(conexao)
    print(conexao, dados)

    if not dados.endswith(b'\r\n'):
        #if the string does not ends with \r\n it means that the remainning caracters must be used in the next instruction
        dados = list(filter((b'').__ne__, dados.split(b'\r\n')))
        conexao.dados_residuais += dados.pop(-1)
    else:
        dados = list(filter((b'').__ne__, dados.split(b'\r\n')))

    for data in dados:
        command, payload = data.split(b' ', 1)

        if command.upper() == b'PING':
            conexao.enviar(b':server PONG server :' + payload + b'\r\n')

        if command.upper()  == b'NICK':
            pUpper = payload.upper()
            if validar_nome(payload):
                if conexao in servidor.nick_db.values():
                    oldNick = list(servidor.nick_db.keys())[list(servidor.nick_db.values()).index(conexao)]

                    if pUpper not in (upp.upper() for upp in list(servidor.nick_db.keys())):
                        servidor.nick_db[payload] = conexao
                        del servidor.nick_db[oldNick]
                        conexao.enviar(b':'+ oldNick + b' NICK '+ payload +b'\r\n')
                    else:
                        conexao.enviar(b':server 433 '+ oldNick + b' ' + payload + b' :Nickname is already in use\r\n')
                else:
                    if pUpper not in (upp.upper() for upp in list(servidor.nick_db.keys())):
                        servidor.nick_db[payload] = conexao
                        conexao.enviar(b':server 001 ' + payload + b' :Welcome\r\n')
                        conexao.enviar(b':server 422 ' + payload + b' :MOTD File is missing\r\n')
                    else:
                        conexao.enviar(b':server 433 * ' + payload + b' :Nickname is already in use\r\n')
            else:
                conexao.enviar(b':server 432 * ' + payload + b' :Erroneous nickname\r\n')

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.dados_residuais = b''
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.nick_db = dict()
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()

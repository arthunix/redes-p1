#!/usr/bin/env python3
import asyncio
import re
import sys
from tcp import Servidor

if sys.platform == 'win32': asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()

def dados_recebidos(conexao, dados):
    dados = conexao.dados_residuais + dados
    conexao.dados_residuais = b''

    if dados == b'':
        return sair(conexao)
    print(conexao, dados)

    if not dados.endswith(b'\r\n'):
        #if the string does not ends with \r\n it means that the remainning caracters must be used in the next instruction
        dados = list(filter((b'').__ne__, dados.split(b'\r\n')))
        conexao.dados_residuais += dados.pop(-1)
    else:
        dados = list(filter((b'').__ne__, dados.split(b'\r\n')))

    for data in dados:
        command, payload = data.split(b' ', 1)

        if command.upper() == b'PING':
            conexao.enviar(b':server PONG server :' + payload + b'\r\n')

        if command.upper() == b'NICK':
            pUpper = payload.upper()
            if validar_nome(payload):
                if conexao in servidor.nick_db.values():
                    oldNick = list(servidor.nick_db.keys())[list(servidor.nick_db.values()).index(conexao)]

                    if pUpper not in (upp.upper() for upp in list(servidor.nick_db.keys())):
                        servidor.nick_db[payload] = conexao
                        del servidor.nick_db[oldNick]
                        conexao.enviar(b':'+ oldNick + b' NICK '+ payload +b'\r\n')
                    else:
                        conexao.enviar(b':server 433 '+ oldNick + b' ' + payload + b' :Nickname is already in use\r\n')
                else:
                    if pUpper not in (upp.upper() for upp in list(servidor.nick_db.keys())):
                        servidor.nick_db[payload] = conexao
                        conexao.enviar(b':server 001 ' + payload + b' :Welcome\r\n')
                        conexao.enviar(b':server 422 ' + payload + b' :MOTD File is missing\r\n')
                    else:
                        conexao.enviar(b':server 433 * ' + payload + b' :Nickname is already in use\r\n')
            else:
                conexao.enviar(b':server 432 * ' + payload + b' :Erroneous nickname\r\n')

        if command.upper() == b'PRIVMSG':
                destination, content = payload.split(b' :', 1)
                remetenteNick = list(servidor.nick_db.keys())[list(servidor.nick_db.values()).index(conexao)]
                dUpper = destination.upper()
                
                if destination.startswith(b'#') and dUpper in servidor.chan_db.keys(): 
                    for i in servidor.chan_db[dUpper]:
                        if servidor.chan_db[dUpper][i] != conexao:
                            servidor.chan_db[dUpper][i].enviar(b':' + remetenteNick + b' PRIVMSG ' + destination + b' :' + content + b'\r\n')
                else:
                    destinationConnection = None
                    for i in servidor.conn_db:
                        if list(servidor.nick_db.keys())[list(servidor.nick_db.values()).index(i)].upper() == dUpper:
                            destinationConnection = i
                    if destinationConnection != None:
                        destinationConnectionNick = list(servidor.nick_db.keys())[list(servidor.nick_db.values()).index(destinationConnection)]
                        destinationConnection.enviar(b':' + remetenteNick + b' PRIVMSG ' + destinationConnectionNick + b' :' + content + b'\r\n')

        if command.upper() == b'JOIN':
                if payload.startswith(b'#') and validar_nome(payload[1:]):
                    pUpper = payload.upper()

                    connectionNick = list(servidor.nick_db.keys())[list(servidor.nick_db.values()).index(conexao)]

                    if pUpper not in (upp.upper() for upp in list(servidor.chan_db.keys())):
                        servidor.chan_db[pUpper] = dict()
                    servidor.chan_db[pUpper][connectionNick] = conexao 
                    
                    for i in servidor.chan_db[pUpper]:
                        servidor.chan_db[pUpper][i].enviar(b':' + connectionNick + b' JOIN :' + payload + b'\r\n')

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    servidor.conn_db.append(conexao)
    conexao.dados_residuais = b''
    conexao.registrar_recebedor(dados_recebidos)

servidor = Servidor(6667)
servidor.nick_db = dict()
servidor.chan_db = dict()
servidor.conn_db = list()
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
